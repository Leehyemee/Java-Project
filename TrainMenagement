package start;

import java.awt.EventQueue;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class TrainMenagement extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;

    private DefaultTableModel model;
    private JTable table;

    public TrainMenagement() {
        setTitle("기차 관리");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 1105, 580);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        // 상단 패널
        JPanel panel = new JPanel();
        panel.setBounds(0, 0, 1089, 92);
        panel.setBackground(new Color(219, 254, 205));
        contentPane.add(panel);
        panel.setLayout(null);

        JLabel TM_JL = new JLabel("기차 관리");
        TM_JL.setFont(new Font("굴림", Font.BOLD, 22));
        TM_JL.setBounds(12, 23, 139, 32);
        panel.add(TM_JL);

        // 추가 버튼
        JButton Add_BT = new JButton("추가");
        Add_BT.setBackground(new Color(255, 255, 255));
        Add_BT.setFont(new Font("굴림", Font.BOLD, 12));
        Add_BT.setBounds(575, 23, 97, 45);
        panel.add(Add_BT);

        // 삭제 버튼
        JButton Del_BT = new JButton("삭제");
        Del_BT.setFont(new Font("굴림", Font.BOLD, 12));
        Del_BT.setBackground(Color.WHITE);
        Del_BT.setBounds(710, 23, 97, 45);
        panel.add(Del_BT);

        // 로그아웃 버튼
        JButton LogOut_BT = new JButton("로그아웃");
        LogOut_BT.setFont(new Font("굴림", Font.BOLD, 12));
        LogOut_BT.setBackground(Color.WHITE);
        LogOut_BT.setBounds(965, 23, 97, 45);
        panel.add(LogOut_BT);

        // 조회 버튼
        JButton Add_BT_1 = new JButton("조회");
        Add_BT_1.setFont(new Font("굴림", Font.BOLD, 12));
        Add_BT_1.setBackground(Color.WHITE);
        Add_BT_1.setBounds(451, 23, 97, 45);
        panel.add(Add_BT_1);

        // 테이블 생성 및 설정
        String[] header = {"TRAIN_NUM", "TRAIN_TYPE", "STR_STATION", "ARR_STATION", "START_DAY", "ARRIVE_DAY", "MONEY", "ECONOMY_SEAT", "BABY_SEAT", "STAND_SEAT", "SCHEDULE_NUM"};
        model = new DefaultTableModel(header, 0);
        table = new JTable(model);
        JScrollPane jsp = new JScrollPane(table, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jsp.setBounds(0, 94, 1089, 447);
        contentPane.add(jsp);

        // 가운데 정렬을 위한 렌더러 설정
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        // 모든 열에 대해 가운데 정렬 적용
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

//     // "추가" 버튼 클릭 시 이벤트 처리
//        Add_BT.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                // 입력 값을 받을 수 있도록 JOptionPane을 사용하여 대화 상자 표시
//                String trainNum = JOptionPane.showInputDialog("기차 번호를 입력하세요");
//                if (trainNum == null || trainNum.isEmpty()) return;
//
//                String trainType = JOptionPane.showInputDialog("기차 유형을 입력하세요");
//                if (trainType == null || trainType.isEmpty()) return;
//
//                String strStation = JOptionPane.showInputDialog("출발 역을 입력하세요.");
//                if (strStation == null || strStation.isEmpty()) return;
//
//                String arrStation = JOptionPane.showInputDialog("도착 역을 입력하세요.");
//                if (arrStation == null || arrStation.isEmpty()) return;
//
//                String startDay = JOptionPane.showInputDialog("출발 날짜를 입력하세요. (예: 2024-12-01 08:00)");
//                if (startDay == null || startDay.isEmpty()) return;
//
//                String arriveDay = JOptionPane.showInputDialog("도착 날짜를 입력하세요. (예: 2024-12-01 08:00)");
//                if (arriveDay == null || arriveDay.isEmpty()) return;
//
//                String money = JOptionPane.showInputDialog("요금을 입력하세요.");
//                if (money == null || money.isEmpty()) return;
//
//                String economySeat = JOptionPane.showInputDialog("이코노미 좌석 수를 입력하세요.");
//                if (economySeat == null || economySeat.isEmpty()) return;
//
//                String babySeat = JOptionPane.showInputDialog("유아 좌석 수를 입력하세요.");
//                if (babySeat == null || babySeat.isEmpty()) return;
//
//                String standSeat = JOptionPane.showInputDialog("스탠딩 좌석 수를 입력하세요");
//                if (standSeat == null || standSeat.isEmpty()) return;
//                
//                String schedulenum = JOptionPane.showInputDialog("스탠딩 좌석 수를 입력하세요");
//                if (standSeat == null || standSeat.isEmpty()) return;
//
//                // SimpleDateFormat을 사용하여 사용자 입력 값을 java.sql.Timestamp로 변환
//                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
//                java.sql.Timestamp startTimestamp = null;
//                java.sql.Timestamp arriveTimestamp = null;
//
//                try {
//                    startTimestamp = new java.sql.Timestamp(sdf.parse(startDay).getTime());
//                    arriveTimestamp = new java.sql.Timestamp(sdf.parse(arriveDay).getTime());
//                } catch (Exception ex) {
//                    JOptionPane.showMessageDialog(TrainMenagement.this, "날짜 형식이 잘못되었습니다. 'yyyy-MM-dd HH:mm' 형식으로 입력해 주세요.");
//                    return;
//                }
//                
//                // DB에 추가하는 SQL 쿼리
//                String sql = "INSERT INTO train (TRAIN_NUM, TRAIN_TYPE, STR_STATION, ARR_STATION, START_DAY, ARRIVE_DAY, MONEY, ECONOMY_SEAT, BABY_SEAT, STAND_SEAT, SCHEDULE_NUM) " +
//                             "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
//
//                try {
//                    con = connect();  // DB 연결
//                    pstmt = con.prepareStatement(sql);
//
//                    // 파라미터 설정
//                    pstmt.setString(1, trainNum);
//                    pstmt.setString(2, trainType);
//                    pstmt.setString(3, strStation);
//                    pstmt.setString(4, arrStation);
//                    pstmt.setTimestamp(5, startTimestamp); // TIMESTAMP 값 설정
//                    pstmt.setTimestamp(6, arriveTimestamp); // TIMESTAMP 값 설정
//                    pstmt.setString(7, money);
//                    pstmt.setString(8, economySeat);
//                    pstmt.setString(9, babySeat);
//                    pstmt.setString(10, standSeat);
//                    pstmt.setint(11, schedulenum);
//
//                    // SQL 실행
//                    pstmt.executeUpdate();
//
//                    JOptionPane.showMessageDialog(TrainMenagement.this, "기차 정보가 추가되었습니다.");
//
//                    // 테이블에 새 행 추가
//                    model.addRow(new Object[]{trainNum, trainType, strStation, arrStation, startDay, arriveDay, money, economySeat, babySeat, standSeat});
//
//                } catch (SQLException ex) {
//                    ex.printStackTrace();
//                    JOptionPane.showMessageDialog(TrainMenagement.this, "DB 연결 또는 데이터 추가 실패.");
//                } finally {
//                    closeConnection(con);  // DB 연결 종료
//                }
//            }
//        });  
      
     // 삭제 버튼 클릭 이벤트
        Del_BT.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	connect();
               delete();
               
            }
        });
  
        
        
        
        
        
        
     // "조회" 버튼 클릭 이벤트
        Add_BT_1.addActionListener(e -> {
            String sql = "SELECT t.TRAIN_NUM, t.TRAIN_TYPE, t.STR_STATION, t.ARR_STATION, " +
                         "s.SCHEDULE_ID, s.START_DAY, s.ARRIVE_DAY, s.MONEY, s.ECONOMY_SEAT, s.BABY_SEAT, s.STAND_SEAT, s.SCHEDULE_NUM " +
                         "FROM train t JOIN schedule s ON t.TRAIN_NUM = s.TRAIN_NUM"; // SQL 쿼리

            Connection conn = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;

            try {
                conn = connect(); // DB 연결
                pstmt = conn.prepareStatement(sql);
                rs = pstmt.executeQuery();

                // 테이블 모델 초기화
                model.setRowCount(0); // 테이블을 초기화합니다. (기존의 데이터 삭제)

                // 조회 결과를 테이블에 추가
                while (rs.next()) {
                    String trainNum = rs.getString("TRAIN_NUM");
                    String trainType = rs.getString("TRAIN_TYPE");
                    String strStation = rs.getString("STR_STATION");
                    String arrStation = rs.getString("ARR_STATION");
                    String scheduleId = rs.getString("SCHEDULE_ID");
                    String startDay = rs.getString("START_DAY");
                    String arriveDay = rs.getString("ARRIVE_DAY");
                    int money = rs.getInt("MONEY");
                    int economySeat = rs.getInt("ECONOMY_SEAT");
                    int babySeat = rs.getInt("BABY_SEAT");
                    String standSeat = rs.getString("STAND_SEAT");
                    int scheduleNum = rs.getInt("SCHEDULE_NUM");

                    // 데이터가 조회되면 테이블에 추가
                    model.addRow(new Object[]{trainNum, trainType, strStation, arrStation, scheduleId, startDay, arriveDay, money, economySeat, babySeat, standSeat, scheduleNum});
                }

                // 조회 완료 메시지
                JOptionPane.showMessageDialog(this, "조회 완료.");
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "DB 연결 실패.");
            } finally {
                closeConnection(conn); // DB 연결 종료
            }
        });



        // 로그아웃 버튼 이벤트 처리 (기능은 예시로 비워두었습니다)
        LogOut_BT.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // "종료하시겠습니까?" 메시지 표시
                int result = JOptionPane.showConfirmDialog(
                		TrainMenagement.this,    // 부모 창
                        "종료하시겠습니까?", // 메시지
                        "로그아웃",         // 제목
                        JOptionPane.YES_NO_OPTION, // Y/N 옵션
                        JOptionPane.QUESTION_MESSAGE // 질문 아이콘
                );

             // "Yes"를 누르면 로그인 화면 실행
                if (result == JOptionPane.YES_OPTION) {
                    // Login 클래스 실행
                    Login loginFrame = new Login();  // Login 클래스를 인스턴스화
                    loginFrame.setVisible(true);      // 로그인 창을 보이도록 설정

                    // 현재 창을 닫기
                    dispose();  // MasterMain 창을 닫음
                }
                // "No"를 누르면 아무 동작도 하지 않음
                else if (result == JOptionPane.NO_OPTION) {
                    // 아무 동작도 하지 않음 (창을 유지)
                }
            }
        });
    }

 // DB 연결 메서드
    public Connection connect() {
        String driver = "oracle.jdbc.driver.OracleDriver";
        String url = "jdbc:oracle:thin:@localhost:1521:xe";
        String user = "hyemee";
        String password = "1234";

        try {
            Class.forName(driver); // 드라이버 로드
            return DriverManager.getConnection(url, user, password);  // DB 연결 반환
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, "DB 연결 실패.");
            e.printStackTrace();
            return null;
        }
    }

    // DB 연결 종료 메서드
    public void closeConnection(Connection con) {
        try {
            if (con != null) {
                con.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    void delete() {
        try {
            int row = table.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(null, "삭제할 기차를 선택하세요.");
                return; 
            }

            String trainNumStr = model.getValueAt(row, 0).toString();
            int trainNum = Integer.parseInt(trainNumStr);

            // 1. schedule 테이블에서 먼저 삭제
            
            
            String sql = "delete from schedule where train_num = ?";
            Connection con = null;
            PreparedStatement pstmt = con.prepareStatement(sql);
            pstmt.setInt(1, trainNum); 
            int res = pstmt.executeUpdate();
            if (res > 0) {
                JOptionPane.showMessageDialog(null, "일정 삭제 성공");
            } else {
                JOptionPane.showMessageDialog(null, "일정 삭제 실패");
            }



            // 테이블 UI에서 선택된 행 제거
            model.removeRow(row);

            // 3. 리소스 정리
            pstmt.close();
            con.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "기차 번호가 올바르지 않습니다.");
            e.printStackTrace();
        }
    }

    // 메인 메서드
    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                TrainMenagement frame = new TrainMenagement();
                frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }
}
